// From ziran2019 CS/Util/DataDir.h.in
#pragma once
#include <string>
#include <fstream>
#include <sstream>
#include <spdlog/spdlog.h>
// #include <Ziran/CS/Util/Logging.h>
#include "FileSystem.h"
#include "config.h"

namespace ZIRAN {
/**
  Helper class for getting the absolute path of
  the data directory

  This file is generated by CMake so that it can
  hard code the absolute path to the data directory
  at build time. Therefore only edit the
  template file DataDir.h.in and not DataDir.h
  */
class DataDir {
public:
    using OutFile = std::ofstream;
    using InFile = std::ifstream;
    std::string path;

    static std::string& defaultDataDir()
    {
        static std::string default_data_dir = CMAKE_DATA_DIR;
        return default_data_dir;
    }

    DataDir()
        : path(defaultDataDir())
    {
    }

    explicit DataDir(const std::string& path)
        : path(path)
    {
    }

    std::string absolutePath(const std::string& relative_path)
    {
        // if the input starts with '/', the user input is absolute path
        if (!relative_path.empty() && relative_path.front() == '/')
            return relative_path;
        else
            return path + "/" + relative_path;
    }

    void setPath(const std::string& p)
    {
        path = p;
    }

    template <class File, class Mode>
    void openFile(const std::string& filename, File& file, Mode mode)
    {
        std::ios_base::iostate exceptionMask = file.exceptions() | std::ios::failbit;
        file.exceptions(exceptionMask);
        std::string full_file_name = (path == "") ? filename : absolutePath(filename);
        // ZIRAN_DBUG("Opening file ", full_file_name);
        spdlog::info("Opening file {0}", full_file_name);
        file.open(full_file_name, mode);
    }

    InFile openBinaryInput(const std::string& filename)
    {
        std::ifstream in;
        openFile(filename, in, std::ios::in | std::ios::binary);
        return in;
    }

    OutFile openBinaryOutput(const std::string& filename)
    {
        std::ofstream out;
        openFile(filename, out, std::ios::out | std::ios::trunc | std::ios::binary);
        return out;
    }

    InFile openTextInput(const std::string& filename)
    {
        std::ifstream in;
        openFile(filename, in, std::ios::in);
        return in;
    }

    OutFile openTextOutput(const std::string& filename)
    {
        std::ofstream out;
        openFile(filename, out, std::ios::out | std::ios::trunc | std::ios::binary);
        return out;
    }

    void createPath()
    {
        // ZIRAN_DBUG("Creating path ", path);
        spdlog::info("Creating path {0}", path);
        FILESYSTEM::createPath(path);
    }

    void readFile(std::ostream& out, const std::string& filename)
    {
        FILESYSTEM::readFile(out, absolutePath(filename));
    }
};


// TODO: remove this file
std::string outputFileName(const std::string& name = "restart", const std::string& suffix = ".dat")
{
    static int substep = 0;
    static int frame = 0;
    std::ostringstream filename;
    filename << name << "_" << frame;
    if (substep > 0)
        filename << "_" << substep;
    filename << suffix;
    frame++;
    return filename.str();
}
}
